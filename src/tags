!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ColorFun	vtkSliderCallback.cpp	/^vtkColorTransferFunction* vtkSliderCallback::ColorFun;$/;"	m	class:vtkSliderCallback	file:
ColorFun	vtkSliderCallback.h	/^    static vtkColorTransferFunction* ColorFun;$/;"	m	class:vtkSliderCallback	access:public
Execute	vtkSliderCallback.cpp	/^void vtkSliderCallback::Execute(vtkObject *caller, unsigned long, void*){$/;"	f	class:vtkSliderCallback	signature:(vtkObject *caller, unsigned long, void*)
Execute	vtkSliderCallback.h	/^    virtual void Execute(vtkObject *caller, unsigned long, void*);$/;"	p	class:vtkSliderCallback	access:public	signature:(vtkObject *caller, unsigned long, void*)
OpacityFun	vtkSliderCallback.cpp	/^vtkPiecewiseFunction* vtkSliderCallback::OpacityFun;$/;"	m	class:vtkSliderCallback	file:
OpacityFun	vtkSliderCallback.h	/^    static vtkPiecewiseFunction* OpacityFun;$/;"	m	class:vtkSliderCallback	access:public
RenderWidget	renderWidget.cpp	/^RenderWidget::RenderWidget(char* image, char *activity){$/;"	f	class:RenderWidget	signature:(char* image, char *activity)
RenderWidget	renderWidget.h	/^		RenderWidget(char* image, char *activity);$/;"	p	class:RenderWidget	access:public	signature:(char* image, char *activity)
RenderWidget	renderWidget.h	/^class RenderWidget : public QVTKWidget{$/;"	c	inherits:QVTKWidget
RenderWidget::RenderWidget	renderWidget.cpp	/^RenderWidget::RenderWidget(char* image, char *activity){$/;"	f	class:RenderWidget	signature:(char* image, char *activity)
RenderWidget::RenderWidget	renderWidget.h	/^		RenderWidget(char* image, char *activity);$/;"	p	class:RenderWidget	access:public	signature:(char* image, char *activity)
RenderWidget::cam	renderWidget.h	/^		vtkCamera* cam;$/;"	m	class:RenderWidget	access:public
RenderWidget::renWin	renderWidget.h	/^		vtkRenderWindow* renWin;$/;"	m	class:RenderWidget	access:private
RenderWidget::renderImage	renderWidget.cpp	/^vtkRenderWindow* RenderWidget::renderImage(char* image, char *activity){$/;"	f	class:RenderWidget	signature:(char* image, char *activity)
RenderWidget::renderImage	renderWidget.h	/^		vtkRenderWindow* renderImage(char* image, char *activity);$/;"	p	class:RenderWidget	access:private	signature:(char* image, char *activity)
RenderWidget::setCameraBack	renderWidget.cpp	/^void RenderWidget::setCameraBack(){$/;"	f	class:RenderWidget	signature:()
RenderWidget::setCameraBack	renderWidget.h	/^		void setCameraBack();$/;"	p	class:RenderWidget	access:public	signature:()
RenderWidget::setCameraFront	renderWidget.cpp	/^void RenderWidget::setCameraFront(){$/;"	f	class:RenderWidget	signature:()
RenderWidget::setCameraFront	renderWidget.h	/^		void setCameraFront();$/;"	p	class:RenderWidget	access:public	signature:()
Volume	volume.cpp	/^Volume::Volume(isis::data::Image* image, isis::data::Image* activity){$/;"	f	class:Volume	signature:(isis::data::Image* image, isis::data::Image* activity)
Volume	volume.h	/^    Volume(isis::data::Image* image, isis::data::Image* activity=NULL);$/;"	p	class:Volume	access:public	signature:(isis::data::Image* image, isis::data::Image* activity=NULL)
Volume	volume.h	/^class Volume : public vtkImageAppendComponents{$/;"	c	inherits:vtkImageAppendComponents
Volume::Volume	volume.cpp	/^Volume::Volume(isis::data::Image* image, isis::data::Image* activity){$/;"	f	class:Volume	signature:(isis::data::Image* image, isis::data::Image* activity)
Volume::Volume	volume.h	/^    Volume(isis::data::Image* image, isis::data::Image* activity=NULL);$/;"	p	class:Volume	access:public	signature:(isis::data::Image* image, isis::data::Image* activity=NULL)
Volume::activity	volume.h	/^    isis::data::Image* activity;$/;"	m	class:Volume	access:private
Volume::ad	volume.h	/^    vtkImageData* ad;$/;"	m	class:Volume	access:private
Volume::bounds	volume.h	/^    double* bounds;$/;"	m	class:Volume	access:private
Volume::dims	volume.h	/^    int dims[3];$/;"	m	class:Volume	access:private
Volume::dims1	volume.h	/^    int dims1[3];$/;"	m	class:Volume	access:private
Volume::dims2	volume.h	/^    int dims2[3];$/;"	m	class:Volume	access:private
Volume::getBounds	volume.cpp	/^double* Volume::getBounds(){$/;"	f	class:Volume	signature:()
Volume::getBounds	volume.h	/^    double* getBounds();$/;"	p	class:Volume	access:public	signature:()
Volume::getRange	volume.cpp	/^double* Volume::getRange(){$/;"	f	class:Volume	signature:()
Volume::getRange	volume.h	/^    double* getRange();$/;"	p	class:Volume	access:public	signature:()
Volume::hasActivity	volume.cpp	/^bool Volume::hasActivity(){$/;"	f	class:Volume	signature:()
Volume::hasActivity	volume.h	/^    bool hasActivity();$/;"	p	class:Volume	access:public	signature:()
Volume::id	volume.h	/^    vtkImageData* id;$/;"	m	class:Volume	access:private
Volume::image	volume.h	/^    isis::data::Image* image;$/;"	m	class:Volume	access:private
Volume::range	volume.h	/^    double* range;$/;"	m	class:Volume	access:private
Volume::setImageData	volume.cpp	/^void Volume::setImageData(isis::data::Image* image){$/;"	f	class:Volume	signature:(isis::data::Image* image)
Volume::setImageData	volume.h	/^    void setImageData(isis::data::Image* image );$/;"	p	class:Volume	access:private	signature:(isis::data::Image* image )
Volume::size1	volume.h	/^    int size1;$/;"	m	class:Volume	access:private
Volume::size2	volume.h	/^    int size2;$/;"	m	class:Volume	access:private
Volume::withActivity	volume.h	/^    bool withActivity;$/;"	m	class:Volume	access:private
_RENDERWIDGET_H_	renderWidget.h	6;"	d
_SETCAMERA_H_	setCamera.h	4;"	d
_VOLUME_H_	volume.h	4;"	d
_VTKSLIDERCALLBACK_H_	vtkSliderCallback.h	8;"	d
activity	volume.h	/^    isis::data::Image* activity;$/;"	m	class:Volume	access:private
ad	volume.h	/^    vtkImageData* ad;$/;"	m	class:Volume	access:private
blue	vtkSliderCallback.cpp	/^double vtkSliderCallback::blue;$/;"	m	class:vtkSliderCallback	file:
blue	vtkSliderCallback.h	/^    static double blue;$/;"	m	class:vtkSliderCallback	access:public
bounds	volume.h	/^    double* bounds;$/;"	m	class:Volume	access:private
cam	renderWidget.h	/^		vtkCamera* cam;$/;"	m	class:RenderWidget	access:public
dims	volume.h	/^    int dims[3];$/;"	m	class:Volume	access:private
dims1	volume.h	/^    int dims1[3];$/;"	m	class:Volume	access:private
dims2	volume.h	/^    int dims2[3];$/;"	m	class:Volume	access:private
getBounds	volume.cpp	/^double* Volume::getBounds(){$/;"	f	class:Volume	signature:()
getBounds	volume.h	/^    double* getBounds();$/;"	p	class:Volume	access:public	signature:()
getRange	volume.cpp	/^double* Volume::getRange(){$/;"	f	class:Volume	signature:()
getRange	volume.h	/^    double* getRange();$/;"	p	class:Volume	access:public	signature:()
h	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	e	enum:pos
hasActivity	volume.cpp	/^bool Volume::hasActivity(){$/;"	f	class:Volume	signature:()
hasActivity	volume.h	/^    bool hasActivity();$/;"	p	class:Volume	access:public	signature:()
id	volume.h	/^    vtkImageData* id;$/;"	m	class:Volume	access:private
image	volume.h	/^    isis::data::Image* image;$/;"	m	class:Volume	access:private
l	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	e	enum:pos
main	main.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
mapper	vtkSliderCallback.cpp	/^vtkVolumeMapper* vtkSliderCallback::mapper;$/;"	m	class:vtkSliderCallback	file:
mapper	vtkSliderCallback.h	/^		static vtkVolumeMapper* mapper;$/;"	m	class:vtkSliderCallback	access:public
o	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	e	enum:pos
opacity	vtkSliderCallback.cpp	/^double vtkSliderCallback::opacity;$/;"	m	class:vtkSliderCallback	file:
opacity	vtkSliderCallback.h	/^    static double opacity;$/;"	m	class:vtkSliderCallback	access:public
option	vtkSliderCallback.h	/^    int option;$/;"	m	class:vtkSliderCallback	access:public
pos	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	g
r	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	e	enum:pos
range	volume.h	/^    double* range;$/;"	m	class:Volume	access:private
range	vtkSliderCallback.cpp	/^double* vtkSliderCallback::range;$/;"	m	class:vtkSliderCallback	file:
range	vtkSliderCallback.h	/^    static double* range;$/;"	m	class:vtkSliderCallback	access:public
red	vtkSliderCallback.cpp	/^double vtkSliderCallback::red;$/;"	m	class:vtkSliderCallback	file:
red	vtkSliderCallback.h	/^    static double red;$/;"	m	class:vtkSliderCallback	access:public
renWin	renderWidget.h	/^		vtkRenderWindow* renWin;$/;"	m	class:RenderWidget	access:private
renderImage	renderWidget.cpp	/^vtkRenderWindow* RenderWidget::renderImage(char* image, char *activity){$/;"	f	class:RenderWidget	signature:(char* image, char *activity)
renderImage	renderWidget.h	/^		vtkRenderWindow* renderImage(char* image, char *activity);$/;"	p	class:RenderWidget	access:private	signature:(char* image, char *activity)
setCamera	setCamera.cpp	/^void setCamera(vtkCamera* cam, pos position){$/;"	f	signature:(vtkCamera* cam, pos position)
setCamera	setCamera.h	/^void setCamera(vtkCamera* cam, enum pos);$/;"	p	signature:(vtkCamera* cam, enum pos)
setCameraBack	renderWidget.cpp	/^void RenderWidget::setCameraBack(){$/;"	f	class:RenderWidget	signature:()
setCameraBack	renderWidget.h	/^		void setCameraBack();$/;"	p	class:RenderWidget	access:public	signature:()
setCameraFront	renderWidget.cpp	/^void RenderWidget::setCameraFront(){$/;"	f	class:RenderWidget	signature:()
setCameraFront	renderWidget.h	/^		void setCameraFront();$/;"	p	class:RenderWidget	access:public	signature:()
setImageData	volume.cpp	/^void Volume::setImageData(isis::data::Image* image){$/;"	f	class:Volume	signature:(isis::data::Image* image)
setImageData	volume.h	/^    void setImageData(isis::data::Image* image );$/;"	p	class:Volume	access:private	signature:(isis::data::Image* image )
size1	volume.h	/^    int size1;$/;"	m	class:Volume	access:private
size2	volume.h	/^    int size2;$/;"	m	class:Volume	access:private
u	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	e	enum:pos
v	setCamera.h	/^enum pos {u,o,h,v,r,l};$/;"	e	enum:pos
vtkSliderCallback	vtkSliderCallback.cpp	/^vtkSliderCallback::vtkSliderCallback(){$/;"	f	class:vtkSliderCallback	signature:()
vtkSliderCallback	vtkSliderCallback.h	/^    vtkSliderCallback();$/;"	p	class:vtkSliderCallback	access:public	signature:()
vtkSliderCallback	vtkSliderCallback.h	/^class vtkSliderCallback : public vtkCommand{$/;"	c	inherits:vtkCommand
vtkSliderCallback::ColorFun	vtkSliderCallback.cpp	/^vtkColorTransferFunction* vtkSliderCallback::ColorFun;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::ColorFun	vtkSliderCallback.h	/^    static vtkColorTransferFunction* ColorFun;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::Execute	vtkSliderCallback.cpp	/^void vtkSliderCallback::Execute(vtkObject *caller, unsigned long, void*){$/;"	f	class:vtkSliderCallback	signature:(vtkObject *caller, unsigned long, void*)
vtkSliderCallback::Execute	vtkSliderCallback.h	/^    virtual void Execute(vtkObject *caller, unsigned long, void*);$/;"	p	class:vtkSliderCallback	access:public	signature:(vtkObject *caller, unsigned long, void*)
vtkSliderCallback::OpacityFun	vtkSliderCallback.cpp	/^vtkPiecewiseFunction* vtkSliderCallback::OpacityFun;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::OpacityFun	vtkSliderCallback.h	/^    static vtkPiecewiseFunction* OpacityFun;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::blue	vtkSliderCallback.cpp	/^double vtkSliderCallback::blue;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::blue	vtkSliderCallback.h	/^    static double blue;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::mapper	vtkSliderCallback.cpp	/^vtkVolumeMapper* vtkSliderCallback::mapper;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::mapper	vtkSliderCallback.h	/^		static vtkVolumeMapper* mapper;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::opacity	vtkSliderCallback.cpp	/^double vtkSliderCallback::opacity;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::opacity	vtkSliderCallback.h	/^    static double opacity;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::option	vtkSliderCallback.h	/^    int option;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::range	vtkSliderCallback.cpp	/^double* vtkSliderCallback::range;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::range	vtkSliderCallback.h	/^    static double* range;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::red	vtkSliderCallback.cpp	/^double vtkSliderCallback::red;$/;"	m	class:vtkSliderCallback	file:
vtkSliderCallback::red	vtkSliderCallback.h	/^    static double red;$/;"	m	class:vtkSliderCallback	access:public
vtkSliderCallback::vtkSliderCallback	vtkSliderCallback.cpp	/^vtkSliderCallback::vtkSliderCallback(){$/;"	f	class:vtkSliderCallback	signature:()
vtkSliderCallback::vtkSliderCallback	vtkSliderCallback.h	/^    vtkSliderCallback();$/;"	p	class:vtkSliderCallback	access:public	signature:()
withActivity	volume.h	/^    bool withActivity;$/;"	m	class:Volume	access:private
